// src/theme/shadows.js
// üå´Ô∏è Design System - Sombras Sorteio J√°
// Sistema de eleva√ß√£o consistente para depth e hierarquia visual

import { Platform } from 'react-native';

// üéØ Eleva√ß√µes baseadas no Material Design
const elevations = {
  0: 0,   // Nenhuma sombra
  1: 1,   // Sombra sutil - cards em repouso
  2: 2,   // Sombra leve - bot√µes
  3: 4,   // Sombra m√©dia - cards hover
  4: 8,   // Sombra forte - modais
  5: 16,  // Sombra dram√°tica - celebration
};

// üå´Ô∏è Sistema de sombras para iOS e Android
const createShadow = (elevation, color = '#000') => {
  if (Platform.OS === 'ios') {
    // iOS usa shadowOffset, shadowOpacity, shadowRadius
    const opacity = elevation * 0.02; // Aumenta opacidade com eleva√ß√£o
    const radius = elevation === 0 ? 0 : elevation + 2;
    const offset = elevation === 0 ? 0 : Math.ceil(elevation * 0.5);
    
    return {
      shadowColor: color,
      shadowOffset: {
        width: 0,
        height: offset,
      },
      shadowOpacity: Math.min(opacity, 0.25), // M√°ximo 25% de opacidade
      shadowRadius: radius,
    };
  } else {
    // Android usa elevation
    return {
      elevation: elevation,
      shadowColor: color, // Para compatibilidade
    };
  }
};

// üé® Sombras pr√©-definidas
export const shadows = {
  // üö´ Sem sombra
  none: createShadow(0),
  
  // üìÑ Sombras sutis - para cards e elementos em repouso
  subtle: createShadow(elevations[1]),
  
  // üîò Sombras leves - para bot√µes e inputs
  light: createShadow(elevations[2]),
  
  // üì¶ Sombras m√©dias - para cards em hover/pressed
  medium: createShadow(elevations[3]),
  
  // üé≠ Sombras fortes - para modais e overlays
  strong: createShadow(elevations[4]),
  
  // ‚ú® Sombras dram√°ticas - para momentos especiais
  dramatic: createShadow(elevations[5]),
  
  // üé® Sombras coloridas para estados especiais
  success: createShadow(elevations[2], '#22c55e'),
  warning: createShadow(elevations[2], '#f59e0b'),
  error: createShadow(elevations[2], '#ef4444'),
  primary: createShadow(elevations[2], '#0ea5e9'),
  
  // üèÜ Sombras douradas para gamifica√ß√£o
  gold: createShadow(elevations[3], '#ffd700'),
  celebration: createShadow(elevations[4], '#ff6b6b'),
};

// üéÆ Sombras espec√≠ficas para gamifica√ß√£o
export const gamificationShadows = {
  // üèÖ Badge de conquista
  badge: {
    ...createShadow(elevations[2]),
    // Glow effect sutil
    ...(Platform.OS === 'ios' && {
      shadowColor: '#ffd700',
      shadowOpacity: 0.3,
    }),
  },
  
  // üíé Elementos premium
  premium: {
    ...createShadow(elevations[3]),
    ...(Platform.OS === 'ios' && {
      shadowColor: '#9333ea',
      shadowOpacity: 0.2,
    }),
  },
  
  // üî• Streak em alta
  streak: {
    ...createShadow(elevations[2]),
    ...(Platform.OS === 'ios' && {
      shadowColor: '#ff6b6b',
      shadowOpacity: 0.25,
    }),
  },
  
  // ‚≠ê Pontos brilhantes
  points: {
    ...createShadow(elevations[1]),
    ...(Platform.OS === 'ios' && {
      shadowColor: '#ffd700',
      shadowOpacity: 0.4,
    }),
  },
};

// üéä Sombras para momentos de celebra√ß√£o
export const celebrationShadows = {
  // üèÜ Vencedor do sorteio
  winner: {
    ...createShadow(elevations[5]),
    ...(Platform.OS === 'ios' && {
      shadowColor: '#ff6b6b',
      shadowOpacity: 0.3,
      shadowRadius: 20,
    }),
  },
  
  // üéâ Conquista desbloqueada
  achievement: {
    ...createShadow(elevations[4]),
    ...(Platform.OS === 'ios' && {
      shadowColor: '#22c55e',
      shadowOpacity: 0.25,
      shadowRadius: 15,
    }),
  },
  
  // ‚ú® Momento m√°gico
  magic: {
    ...createShadow(elevations[3]),
    ...(Platform.OS === 'ios' && {
      shadowColor: '#9333ea',
      shadowOpacity: 0.3,
      shadowRadius: 12,
    }),
  },
};

// üîò Sombras para estados de bot√£o
export const buttonShadows = {
  // Estado normal
  default: shadows.light,
  
  // Estado hover/pressed
  pressed: shadows.subtle,
  
  // Estado disabled
  disabled: shadows.none,
  
  // Bot√£o prim√°rio
  primary: shadows.medium,
  
  // Bot√£o floating action
  fab: shadows.strong,
  
  // Bot√£o de celebra√ß√£o
  celebration: celebrationShadows.magic,
};

// üì¶ Sombras para cards
export const cardShadows = {
  // Card em repouso
  default: shadows.subtle,
  
  // Card em hover/pressed
  hover: shadows.medium,
  
  // Card selecionado
  selected: shadows.strong,
  
  // Card de resultado
  result: celebrationShadows.winner,
  
  // Card de conquista
  achievement: gamificationShadows.badge,
};

// üé≠ Sombras para modais e overlays
export const modalShadows = {
  // Modal padr√£o
  default: shadows.strong,
  
  // Modal de celebra√ß√£o
  celebration: shadows.dramatic,
  
  // Tooltip
  tooltip: shadows.medium,
  
  // Dropdown
  dropdown: shadows.strong,
  
  // Sheet modal
  sheet: {
    ...shadows.dramatic,
    ...(Platform.OS === 'ios' && {
      shadowOffset: {
        width: 0,
        height: -4, // Sombra para cima
      },
    }),
  },
};

// üé® Fun√ß√£o helper para criar sombras customizadas
export const createCustomShadow = (elevation, color = '#000', opacity = null) => {
  const customOpacity = opacity || elevation * 0.02;
  
  if (Platform.OS === 'ios') {
    const radius = elevation === 0 ? 0 : elevation + 2;
    const offset = elevation === 0 ? 0 : Math.ceil(elevation * 0.5);
    
    return {
      shadowColor: color,
      shadowOffset: {
        width: 0,
        height: offset,
      },
      shadowOpacity: Math.min(customOpacity, 0.3),
      shadowRadius: radius,
    };
  } else {
    return {
      elevation: elevation,
      shadowColor: color,
    };
  }
};

// üåà Sombras animadas para transi√ß√µes
export const animatedShadows = {
  // Transi√ß√£o de card hover
  cardHover: {
    from: shadows.subtle,
    to: shadows.medium,
  },
  
  // Transi√ß√£o de bot√£o press
  buttonPress: {
    from: shadows.light,
    to: shadows.subtle,
  },
  
  // Transi√ß√£o de modal appear
  modalAppear: {
    from: shadows.none,
    to: shadows.strong,
  },
  
  // Transi√ß√£o de celebra√ß√£o
  celebration: {
    from: shadows.medium,
    to: shadows.dramatic,
  },
};

// üéØ Fun√ß√£o para obter sombra baseada no estado
export const getShadowForState = (component, state = 'default') => {
  const shadowMap = {
    button: buttonShadows,
    card: cardShadows,
    modal: modalShadows,
    gamification: gamificationShadows,
    celebration: celebrationShadows,
  };
  
  const componentShadows = shadowMap[component];
  if (!componentShadows) {
    console.warn(`Componente de sombra n√£o encontrado: ${component}`);
    return shadows.subtle;
  }
  
  const shadow = componentShadows[state];
  if (!shadow) {
    console.warn(`Estado de sombra n√£o encontrado: ${component}.${state}`);
    return componentShadows.default || shadows.subtle;
  }
  
  return shadow;
};

export default shadows;